/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Article } from '../model/models';
import { ArticleCreate } from '../model/models';
import { Calendar } from '../model/models';
import { CalendarCreate } from '../model/models';
import { Category } from '../model/models';
import { CategoryCreate } from '../model/models';
import { ChatMessage } from '../model/models';
import { ChatMessageCreate } from '../model/models';
import { ChatRecipient } from '../model/models';
import { Client } from '../model/models';
import { ClientCreate } from '../model/models';
import { HTTPValidationError } from '../model/models';
import { IngoingInvoice } from '../model/models';
import { IngoingInvoiceCreate } from '../model/models';
import { Job } from '../model/models';
import { JobCreate } from '../model/models';
import { JobStatusType } from '../model/models';
import { JobUpdate } from '../model/models';
import { Lock } from '../model/models';
import { Note } from '../model/models';
import { NoteCreate } from '../model/models';
import { Offer } from '../model/models';
import { OfferCreate } from '../model/models';
import { OfferUpdate } from '../model/models';
import { Order } from '../model/models';
import { OrderCreate } from '../model/models';
import { OrderUpdate } from '../model/models';
import { OutgoingInvoice } from '../model/models';
import { OutgoingInvoiceCreate } from '../model/models';
import { PaymentCreate } from '../model/models';
import { ReminderCreate } from '../model/models';
import { Right } from '../model/models';
import { Stock } from '../model/models';
import { StockCreate } from '../model/models';
import { Supplier } from '../model/models';
import { SupplierCreate } from '../model/models';
import { Token } from '../model/models';
import { Unit } from '../model/models';
import { UnitCreate } from '../model/models';
import { User } from '../model/models';
import { UserCreate } from '../model/models';
import { UserUpdate } from '../model/models';
import { Vat } from '../model/models';
import { VatCreate } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface DefaultServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Article
     * 
     * @param articleCreate 
     */
    createArticleArticlePost(articleCreate: ArticleCreate, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Create Calendar Entry
     * 
     * @param calendarCreate 
     */
    createCalendarEntryCalendarPost(calendarCreate: CalendarCreate, extraHttpRequestParams?: any): Observable<Calendar>;

    /**
     * Create Category
     * 
     * @param categoryCreate 
     */
    createCategoryCategoryPost(categoryCreate: CategoryCreate, extraHttpRequestParams?: any): Observable<Category>;

    /**
     * Create Chat Message
     * 
     * @param userId 
     * @param chatMessageCreate 
     */
    createChatMessageChatsUserIdPost(userId: number, chatMessageCreate: ChatMessageCreate, extraHttpRequestParams?: any): Observable<ChatMessage>;

    /**
     * Create Client
     * 
     * @param clientCreate 
     */
    createClientClientPost(clientCreate: ClientCreate, extraHttpRequestParams?: any): Observable<Client>;

    /**
     * Create Ingoing Invoice
     * 
     * @param ingoingInvoiceCreate 
     */
    createIngoingInvoiceIngoingInvoicePost(ingoingInvoiceCreate: IngoingInvoiceCreate, extraHttpRequestParams?: any): Observable<IngoingInvoice>;

    /**
     * Create Job
     * 
     * @param jobCreate 
     */
    createJobJobPost(jobCreate: JobCreate, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Create Note Entry
     * 
     * @param noteCreate 
     */
    createNoteEntryNotePost(noteCreate: NoteCreate, extraHttpRequestParams?: any): Observable<Note>;

    /**
     * Create Offer
     * 
     * @param offerCreate 
     */
    createOfferOfferPost(offerCreate: OfferCreate, extraHttpRequestParams?: any): Observable<Offer>;

    /**
     * Create Order
     * 
     * @param orderCreate 
     */
    createOrderOrderPost(orderCreate: OrderCreate, extraHttpRequestParams?: any): Observable<Order>;

    /**
     * Create Outgoing Invoice
     * 
     * @param jobId 
     * @param outgoingInvoiceCreate 
     */
    createOutgoingInvoiceOutgoingInvoiceJobIdPost(jobId: number, outgoingInvoiceCreate: OutgoingInvoiceCreate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Payment
     * 
     * @param outgoingInvoiceId 
     * @param paymentCreate 
     */
    createPaymentOutgoingInvoicePaymentOutgoingInvoiceIdAddPost(outgoingInvoiceId: number, paymentCreate: PaymentCreate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Payment
     * 
     * @param outgoingInvoiceId 
     */
    createPaymentOutgoingInvoicePaymentOutgoingInvoiceIdRemovePost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Reminder
     * 
     * @param outgoingInvoiceId 
     * @param reminderCreate 
     */
    createReminderOutgoingInvoiceReminderOutgoingInvoiceIdAddPost(outgoingInvoiceId: number, reminderCreate: ReminderCreate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Reminder
     * 
     * @param outgoingInvoiceId 
     */
    createReminderOutgoingInvoiceReminderOutgoingInvoiceIdRemovePost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Stock
     * 
     * @param stockCreate 
     */
    createStockStockPost(stockCreate: StockCreate, extraHttpRequestParams?: any): Observable<Stock>;

    /**
     * Create Supplier
     * 
     * @param supplierCreate 
     */
    createSupplierSupplierPost(supplierCreate: SupplierCreate, extraHttpRequestParams?: any): Observable<Supplier>;

    /**
     * Create Unit
     * 
     * @param unitCreate 
     */
    createUnitUnitPost(unitCreate: UnitCreate, extraHttpRequestParams?: any): Observable<Unit>;

    /**
     * Create User
     * 
     * @param userCreate 
     */
    createUserUsersPost(userCreate: UserCreate, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Create Vat
     * 
     * @param vatCreate 
     */
    createVatVatPost(vatCreate: VatCreate, extraHttpRequestParams?: any): Observable<Vat>;

    /**
     * Delete Article
     * 
     * @param articleId 
     */
    deleteArticleArticleArticleIdDelete(articleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Calendar Entry
     * 
     * @param calendarId 
     */
    deleteCalendarEntryCalendarCalendarIdPut(calendarId: number, extraHttpRequestParams?: any): Observable<Calendar>;

    /**
     * Delete Category
     * 
     * @param categoryId 
     */
    deleteCategoryCategoryCategoryIdDelete(categoryId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Client
     * 
     * @param clientId 
     */
    deleteClientClientClientIdDelete(clientId: number, extraHttpRequestParams?: any): Observable<Client>;

    /**
     * Delete Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     */
    deleteIngoingInvoiceIngoingInvoiceIngoingInvoiceIdDelete(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Job
     * 
     * @param jobId 
     */
    deleteJobJobJobIdDelete(jobId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Note Entry
     * 
     * @param noteId 
     */
    deleteNoteEntryNoteNoteIdDelete(noteId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Offer
     * 
     * @param offerId 
     */
    deleteOfferOfferOfferIdDelete(offerId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Order
     * 
     * @param orderId 
     */
    deleteOrderOrderOrderIdDelete(orderId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     */
    deleteOutgoingInvoiceOutgoingInvoiceOutgoingInvoiceIdDelete(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Stock
     * 
     * @param stockId 
     */
    deleteStockStockStockIdDelete(stockId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Supplier
     * 
     * @param supplierId 
     */
    deleteSupplierSupplierSupplierIdDelete(supplierId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Unit
     * 
     * @param unitId 
     */
    deleteUnitUnitUnitIdDelete(unitId: number, extraHttpRequestParams?: any): Observable<Unit>;

    /**
     * Delete User
     * 
     * @param userId 
     */
    deleteUserUsersUserIdDelete(userId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Vat
     * 
     * @param vatId 
     */
    deleteVatVatVatIdDelete(vatId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Get Rights
     * 
     * @param skip 
     * @param limit 
     */
    getRightsRightsGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Right>>;

    /**
     * Grant Rights To User
     * 
     * @param userId 
     * @param requestBody 
     */
    grantRightsToUserUsersRightsUserIdPost(userId: number, requestBody: Array<string>, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Islocked Client
     * 
     * @param clientId 
     */
    islockedClientClientIslockedClientIdGet(clientId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Lock Article
     * 
     * @param articleId 
     */
    lockArticleArticleLockArticleIdPost(articleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Article
     * 
     * @param articleId 
     */
    lockArticleArticleUnlockArticleIdPost(articleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Calendar
     * 
     * @param calendarId 
     */
    lockCalendarCalendarLockCalendarIdPost(calendarId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Calendar
     * 
     * @param calendarId 
     */
    lockCalendarCalendarUnlockCalendarIdPost(calendarId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Client
     * 
     * @param clientId 
     */
    lockClientClientLockClientIdPost(clientId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     */
    lockIngoingInvoiceIngoingInvoiceLockIngoingInvoiceIdPost(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     */
    lockIngoingInvoiceIngoingInvoiceUnlockIngoingInvoiceIdPost(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Job
     * 
     * @param jobId 
     */
    lockJobJobLockJobIdPost(jobId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Job
     * 
     * @param jobId 
     */
    lockJobJobUnlockJobIdPost(jobId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Offer
     * 
     * @param offerId 
     */
    lockOfferOfferLockOfferIdPost(offerId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Offer
     * 
     * @param offerId 
     */
    lockOfferOfferUnlockOfferIdPost(offerId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Order
     * 
     * @param orderId 
     */
    lockOrderOrderLockOrderIdPost(orderId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Order
     * 
     * @param orderId 
     */
    lockOrderOrderUnlockOrderIdPost(orderId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     */
    lockOutgoingInvoiceOutgoingInvoiceLockOutgoingInvoiceIdPost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     */
    lockOutgoingInvoiceOutgoingInvoiceUnlockOutgoingInvoiceIdPost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Stock
     * 
     * @param stockId 
     */
    lockStockStockLockStockIdPost(stockId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Stock
     * 
     * @param stockId 
     */
    lockStockStockUnlockStockIdPost(stockId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Unit
     * 
     * @param supplierId 
     */
    lockUnitSupplierLockSupplierIdPost(supplierId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Unit
     * 
     * @param supplierId 
     */
    lockUnitSupplierUnlockSupplierIdPost(supplierId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Unit
     * 
     * @param unitId 
     */
    lockUnitUnitLockUnitIdPost(unitId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Unit
     * 
     * @param unitId 
     */
    lockUnitUnitUnlockUnitIdPost(unitId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Logged In
     * 
     */
    loggedInTokenValidationGet(extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Login For Access Token
     * 
     * @param username 
     * @param password 
     * @param grantType 
     * @param scope 
     * @param clientId 
     * @param clientSecret 
     */
    loginForAccessTokenTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, extraHttpRequestParams?: any): Observable<Token>;

    /**
     * Read Articles
     * 
     * @param skip 
     * @param limit 
     */
    readArticlesArticleGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Article>>;

    /**
     * Read Calendar Entries
     * 
     * @param skip 
     * @param limit 
     */
    readCalendarEntriesCalendarGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Calendar>>;

    /**
     * Read Categories
     * 
     * @param skip 
     * @param limit 
     */
    readCategoriesCategoryGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Category>>;

    /**
     * Read Chat Messages Since Id
     * 
     * @param lastId 
     */
    readChatMessagesSinceIdChatsLastIdGet(lastId: number, extraHttpRequestParams?: any): Observable<Array<ChatMessage>>;

    /**
     * Read Chat Recipients
     * 
     */
    readChatRecipientsChatsRecipientsGet(extraHttpRequestParams?: any): Observable<Array<ChatRecipient>>;

    /**
     * Read Client
     * 
     * @param clientId 
     */
    readClientClientClientIdGet(clientId: number, extraHttpRequestParams?: any): Observable<Client>;

    /**
     * Read Client Count
     * 
     */
    readClientCountClientCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Clients
     * 
     * @param skip 
     * @param limit 
     * @param filter 
     */
    readClientsClientGet(skip?: number, limit?: number, filter?: string, extraHttpRequestParams?: any): Observable<Array<Client>>;

    /**
     * Read Ingoing Invoices
     * 
     * @param skip 
     * @param limit 
     */
    readIngoingInvoicesIngoingInvoiceGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<IngoingInvoice>>;

    /**
     * Read Job Count
     * 
     */
    readJobCountJobCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Job
     * 
     * @param jobId 
     */
    readJobJobJobIdGet(jobId: number, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Read Jobs By Client
     * 
     * @param clientId 
     * @param filter 
     * @param skip 
     * @param limit 
     */
    readJobsByClientJobClientClientIdCountGet(clientId: number, filter?: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Jobs By Client
     * 
     * @param clientId 
     * @param filter 
     * @param skip 
     * @param limit 
     */
    readJobsByClientJobClientClientIdGet(clientId: number, filter?: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Job>>;

    /**
     * Read Jobs
     * 
     * @param skip 
     * @param limit 
     */
    readJobsJobGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Job>>;

    /**
     * Read Note Entries
     * 
     */
    readNoteEntriesNoteGet(extraHttpRequestParams?: any): Observable<Array<Note>>;

    /**
     * Read Offers
     * 
     * @param skip 
     * @param limit 
     */
    readOffersOfferGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Offer>>;

    /**
     * Read Orders
     * 
     * @param skip 
     * @param limit 
     */
    readOrdersOrderGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Order>>;

    /**
     * Read Outgoing Invoices
     * 
     * @param skip 
     * @param limit 
     */
    readOutgoingInvoicesOutgoingInvoiceGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<OutgoingInvoice>>;

    /**
     * Read Stocks
     * 
     * @param skip 
     * @param limit 
     */
    readStocksStockGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Stock>>;

    /**
     * Read Suppliers
     * 
     * @param skip 
     * @param limit 
     */
    readSuppliersSupplierGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Supplier>>;

    /**
     * Read Units
     * 
     * @param skip 
     * @param limit 
     */
    readUnitsUnitGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Unit>>;

    /**
     * Read User
     * 
     * @param userId 
     */
    readUserUsersUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Read Users Me
     * 
     */
    readUsersMeUsersMeGet(extraHttpRequestParams?: any): Observable<User>;

    /**
     * Read Users
     * 
     * @param skip 
     * @param limit 
     */
    readUsersUsersGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
     * Read Vats
     * 
     * @param skip 
     * @param limit 
     */
    readVatsVatGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Vat>>;

    /**
     * Root
     * 
     */
    rootGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Unlock Client
     * 
     * @param clientId 
     */
    unlockClientClientUnlockClientIdPost(clientId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Update Article
     * 
     * @param articleId 
     * @param articleCreate 
     */
    updateArticleArticleArticleIdPut(articleId: number, articleCreate: ArticleCreate, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Update Category
     * 
     * @param categoryId 
     * @param categoryCreate 
     */
    updateCategoryCategoryCategoryIdPut(categoryId: number, categoryCreate: CategoryCreate, extraHttpRequestParams?: any): Observable<Category>;

    /**
     * Update Client
     * 
     * @param clientId 
     * @param clientCreate 
     */
    updateClientClientClientIdPut(clientId: number, clientCreate: ClientCreate, extraHttpRequestParams?: any): Observable<Client>;

    /**
     * Update Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     * @param ingoingInvoiceCreate 
     */
    updateIngoingInvoiceIngoingInvoiceIngoingInvoiceIdPut(ingoingInvoiceId: number, ingoingInvoiceCreate: IngoingInvoiceCreate, extraHttpRequestParams?: any): Observable<IngoingInvoice>;

    /**
     * Update Job
     * 
     * @param jobId 
     * @param jobUpdate 
     */
    updateJobJobJobIdPut(jobId: number, jobUpdate: JobUpdate, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Update Job Path
     * 
     * @param jobId 
     * @param jobPath 
     */
    updateJobPathJobPathJobIdPost(jobId: number, jobPath: string, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Update Job Status
     * 
     * @param jobId 
     * @param jobStatus 
     */
    updateJobStatusJobStatusJobIdPost(jobId: number, jobStatus: JobStatusType, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Update Note Entry
     * 
     * @param noteId 
     * @param noteCreate 
     */
    updateNoteEntryNoteNoteIdPut(noteId: number, noteCreate: NoteCreate, extraHttpRequestParams?: any): Observable<Note>;

    /**
     * Update Offer
     * 
     * @param offerId 
     * @param offerUpdate 
     */
    updateOfferOfferOfferIdPut(offerId: number, offerUpdate: OfferUpdate, extraHttpRequestParams?: any): Observable<Offer>;

    /**
     * Update Order
     * 
     * @param orderId 
     * @param orderUpdate 
     */
    updateOrderOrderOrderIdPut(orderId: number, orderUpdate: OrderUpdate, extraHttpRequestParams?: any): Observable<Order>;

    /**
     * Update Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     * @param outgoingInvoiceCreate 
     */
    updateOutgoingInvoiceOutgoingInvoiceOutgoingInvoiceIdPut(outgoingInvoiceId: number, outgoingInvoiceCreate: OutgoingInvoiceCreate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Update Stock
     * 
     * @param stockId 
     * @param stockCreate 
     */
    updateStockStockStockIdPut(stockId: number, stockCreate: StockCreate, extraHttpRequestParams?: any): Observable<Stock>;

    /**
     * Update Supplier
     * 
     * @param supplierId 
     * @param supplierCreate 
     */
    updateSupplierSupplierSupplierIdPut(supplierId: number, supplierCreate: SupplierCreate, extraHttpRequestParams?: any): Observable<Supplier>;

    /**
     * Update Unit
     * 
     * @param unitId 
     * @param unitCreate 
     */
    updateUnitUnitUnitIdPut(unitId: number, unitCreate: UnitCreate, extraHttpRequestParams?: any): Observable<Unit>;

    /**
     * Update User Me
     * 
     * @param userUpdate 
     */
    updateUserMeUsersMePut(userUpdate: UserUpdate, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Update User
     * 
     * @param userId 
     * @param userUpdate 
     */
    updateUserUsersUserIdPut(userId: number, userUpdate: UserUpdate, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Update Vat
     * 
     * @param vatId 
     * @param vatCreate 
     */
    updateVatVatVatIdPut(vatId: number, vatCreate: VatCreate, extraHttpRequestParams?: any): Observable<Vat>;

}
