/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AdditionalWorkload } from '../model/models';
import { Article } from '../model/models';
import { ArticleCreate } from '../model/models';
import { ArticleUpdate } from '../model/models';
import { ArticleUpdateFull } from '../model/models';
import { Calendar } from '../model/models';
import { CalendarEntry } from '../model/models';
import { CalendarEntryCreate } from '../model/models';
import { Car } from '../model/models';
import { Category } from '../model/models';
import { CategoryCreate } from '../model/models';
import { ChatMessage } from '../model/models';
import { ChatMessageCreate } from '../model/models';
import { ChatRecipient } from '../model/models';
import { Client } from '../model/models';
import { ClientCreate } from '../model/models';
import { ClientValidation } from '../model/models';
import { Contact } from '../model/models';
import { ContactCreate } from '../model/models';
import { ContactUpdate } from '../model/models';
import { Country } from '../model/models';
import { Credential } from '../model/models';
import { CredentialCreate } from '../model/models';
import { CredentialUpdate } from '../model/models';
import { DeliveryNote } from '../model/models';
import { DeliveryNoteCreate } from '../model/models';
import { DeliveryNoteReason } from '../model/models';
import { DeliveryNoteUpdate } from '../model/models';
import { EatingPlace } from '../model/models';
import { Expense } from '../model/models';
import { Fee } from '../model/models';
import { Gender } from '../model/models';
import { HTTPValidationError } from '../model/models';
import { InfoPage } from '../model/models';
import { InfoPageCreate } from '../model/models';
import { InfoPageUpdate } from '../model/models';
import { IngoingInvoice } from '../model/models';
import { IngoingInvoiceCreate } from '../model/models';
import { Job } from '../model/models';
import { JobCreate } from '../model/models';
import { JobStatus } from '../model/models';
import { JobStatusType } from '../model/models';
import { JobUpdate } from '../model/models';
import { Journey } from '../model/models';
import { Language } from '../model/models';
import { Lock } from '../model/models';
import { Maintenance } from '../model/models';
import { MaintenanceCreate } from '../model/models';
import { MaintenanceUpdate } from '../model/models';
import { Meal } from '../model/models';
import { MealSum } from '../model/models';
import { Note } from '../model/models';
import { NoteCreate } from '../model/models';
import { NoteUpdate } from '../model/models';
import { Offer } from '../model/models';
import { OfferCreate } from '../model/models';
import { OfferUpdate } from '../model/models';
import { Order } from '../model/models';
import { OrderBundle } from '../model/models';
import { OrderBundleCreate } from '../model/models';
import { OrderCreate } from '../model/models';
import { OrderStatusType } from '../model/models';
import { OrderUpdate } from '../model/models';
import { OrderedArticle } from '../model/models';
import { OrderedArticleCreate } from '../model/models';
import { OrderedArticlePriceUpdate } from '../model/models';
import { OutgoingInvoice } from '../model/models';
import { OutgoingInvoiceCreate } from '../model/models';
import { OutgoingInvoiceUpdate } from '../model/models';
import { Paint } from '../model/models';
import { Parameter } from '../model/models';
import { ParameterCreate } from '../model/models';
import { PaymentCreate } from '../model/models';
import { Price } from '../model/models';
import { PriceCreate } from '../model/models';
import { PriceUpdate } from '../model/models';
import { Recalculation } from '../model/models';
import { RecalculationCreate } from '../model/models';
import { RecalculationUpdate } from '../model/models';
import { ReminderCreate } from '../model/models';
import { Right } from '../model/models';
import { Service } from '../model/models';
import { ServiceCreate } from '../model/models';
import { ServiceSum } from '../model/models';
import { ServiceUpdate } from '../model/models';
import { Stock } from '../model/models';
import { StockCreate } from '../model/models';
import { StockUpdate } from '../model/models';
import { SubJobCreate } from '../model/models';
import { Supplier } from '../model/models';
import { SupplierCreate } from '../model/models';
import { TechnicalData } from '../model/models';
import { TechnicalDataCreate } from '../model/models';
import { TechnicalDataUpdate } from '../model/models';
import { TemplatePaint } from '../model/models';
import { TemplatePaintCreate } from '../model/models';
import { TemplatePaintUpdate } from '../model/models';
import { Token } from '../model/models';
import { Unit } from '../model/models';
import { UnitCreate } from '../model/models';
import { User } from '../model/models';
import { UserCreate } from '../model/models';
import { UserPassword } from '../model/models';
import { UserUpdate } from '../model/models';
import { Vat } from '../model/models';
import { VatCreate } from '../model/models';
import { WoodList } from '../model/models';
import { WorkDay } from '../model/models';
import { WorkDayAction } from '../model/models';
import { WorkDayCreate } from '../model/models';
import { WorkDayFinish } from '../model/models';
import { WorkDayStart } from '../model/models';
import { WorkDayStop } from '../model/models';
import { WorkDayUpdate } from '../model/models';
import { Workload } from '../model/models';
import { WorkloadCreate } from '../model/models';
import { WorkloadUpdate } from '../model/models';
import { XmlFile } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface DefaultServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Add Ordered Article To Order
     * 
     * @param orderId 
     * @param orderedArticleCreate 
     */
    addOrderedArticleToOrderOrderOrderedArticleOrderIdPut(orderId: number, orderedArticleCreate: OrderedArticleCreate, extraHttpRequestParams?: any): Observable<Order>;

    /**
     * Add Subjob To Job
     * 
     * @param jobId 
     * @param subJobCreate 
     */
    addSubjobToJobJobSubJobJobIdPost(jobId: number, subJobCreate: SubJobCreate, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Bulk Update Contacts
     * 
     * @param contactUpdate 
     */
    bulkUpdateContactsContactBulkPut(contactUpdate: Array<ContactUpdate>, extraHttpRequestParams?: any): Observable<Array<Contact>>;

    /**
     * Bulk Update Credentials
     * 
     * @param credentialUpdate 
     */
    bulkUpdateCredentialsCredentialBulkPut(credentialUpdate: Array<CredentialUpdate>, extraHttpRequestParams?: any): Observable<Array<Credential>>;

    /**
     * Bulk Update Prices
     * 
     * @param priceUpdate 
     */
    bulkUpdatePricesPriceBulkPut(priceUpdate: Array<PriceUpdate>, extraHttpRequestParams?: any): Observable<Array<Price>>;

    /**
     * Bulk Update Technical Data
     * 
     * @param technicalDataUpdate 
     */
    bulkUpdateTechnicalDataTechnicalDataBulkPut(technicalDataUpdate: Array<TechnicalDataUpdate>, extraHttpRequestParams?: any): Observable<Array<TechnicalData>>;

    /**
     * Copy Article And Modify
     * 
     * @param articleId 
     * @param articleUpdate 
     */
    copyArticleAndModifyArticleArticleIdPost(articleId: number, articleUpdate: ArticleUpdate, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Count Ingoing Invoices
     * 
     * @param paid 
     */
    countIngoingInvoicesIngoingInvoiceCountGet(paid?: boolean, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Count Offers By Job
     * 
     * @param jobId 
     */
    countOffersByJobOfferJobCountJobIdGet(jobId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Count Outgoing Invoices By Job
     * 
     * @param jobId 
     */
    countOutgoingInvoicesByJobOutgoingInvoiceJobCountJobIdGet(jobId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Count Outgoing Invoices
     * 
     * @param paid 
     */
    countOutgoingInvoicesOutgoingInvoiceCountGet(paid?: boolean, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Create Article
     * 
     * @param articleCreate 
     */
    createArticleArticlePost(articleCreate: ArticleCreate, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Create Calendar Entry
     * 
     * @param calendarId 
     * @param calendarEntryCreate 
     */
    createCalendarEntryCalendarCalendarIdPost(calendarId: number, calendarEntryCreate: CalendarEntryCreate, extraHttpRequestParams?: any): Observable<CalendarEntry>;

    /**
     * Create Category
     * 
     * @param categoryCreate 
     */
    createCategoryCategoryPost(categoryCreate: CategoryCreate, extraHttpRequestParams?: any): Observable<Category>;

    /**
     * Create Chat Message
     * 
     * @param userId 
     * @param chatMessageCreate 
     */
    createChatMessageChatsUserIdPost(userId: number, chatMessageCreate: ChatMessageCreate, extraHttpRequestParams?: any): Observable<ChatMessage>;

    /**
     * Create Client
     * 
     * @param clientCreate 
     */
    createClientClientPost(clientCreate: ClientCreate, extraHttpRequestParams?: any): Observable<Client>;

    /**
     * Create Contact
     * 
     * @param contactCreate 
     */
    createContactContactPost(contactCreate: ContactCreate, extraHttpRequestParams?: any): Observable<Contact>;

    /**
     * Create Credential
     * 
     * @param credentialCreate 
     */
    createCredentialCredentialPost(credentialCreate: CredentialCreate, extraHttpRequestParams?: any): Observable<Credential>;

    /**
     * Create Delivery Note
     * 
     * @param deliveryNoteCreate 
     */
    createDeliveryNoteDeliveryNotePost(deliveryNoteCreate: DeliveryNoteCreate, extraHttpRequestParams?: any): Observable<DeliveryNote>;

    /**
     * Create Info Page
     * 
     * @param infoPageCreate 
     */
    createInfoPageInfoPagePost(infoPageCreate: InfoPageCreate, extraHttpRequestParams?: any): Observable<InfoPage>;

    /**
     * Create Ingoing Invoice
     * 
     * @param ingoingInvoiceCreate 
     */
    createIngoingInvoiceIngoingInvoicePost(ingoingInvoiceCreate: IngoingInvoiceCreate, extraHttpRequestParams?: any): Observable<IngoingInvoice>;

    /**
     * Create Job
     * 
     * @param jobCreate 
     */
    createJobJobPost(jobCreate: JobCreate, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Create Maintenance
     * 
     * @param maintenanceCreate 
     */
    createMaintenanceMaintenancePost(maintenanceCreate: MaintenanceCreate, extraHttpRequestParams?: any): Observable<Maintenance>;

    /**
     * Create Note Entry
     * 
     * @param noteCreate 
     */
    createNoteEntryNotePost(noteCreate: NoteCreate, extraHttpRequestParams?: any): Observable<Note>;

    /**
     * Create Offer
     * 
     * @param offerCreate 
     */
    createOfferOfferPost(offerCreate: OfferCreate, extraHttpRequestParams?: any): Observable<Offer>;

    /**
     * Create Order Bundle
     * 
     * @param orderBundleCreate 
     */
    createOrderBundleOrderBundlePost(orderBundleCreate: OrderBundleCreate, extraHttpRequestParams?: any): Observable<OrderBundle>;

    /**
     * Create Order
     * 
     * @param orderCreate 
     */
    createOrderOrderPost(orderCreate: OrderCreate, extraHttpRequestParams?: any): Observable<Order>;

    /**
     * Create Outgoing Invoice
     * 
     * @param outgoingInvoiceCreate 
     */
    createOutgoingInvoiceOutgoingInvoicePost(outgoingInvoiceCreate: OutgoingInvoiceCreate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Payment
     * 
     * @param outgoingInvoiceId 
     * @param paymentCreate 
     */
    createPaymentOutgoingInvoicePaymentOutgoingInvoiceIdAddPost(outgoingInvoiceId: number, paymentCreate: PaymentCreate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Payment
     * 
     * @param outgoingInvoiceId 
     */
    createPaymentOutgoingInvoicePaymentOutgoingInvoiceIdRemovePost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Price
     * 
     * @param priceCreate 
     */
    createPricePricePost(priceCreate: PriceCreate, extraHttpRequestParams?: any): Observable<Price>;

    /**
     * Create Recalculation
     * 
     * @param jobId 
     * @param recalculationCreate 
     */
    createRecalculationRecalculationJobIdPost(jobId: number, recalculationCreate: RecalculationCreate, extraHttpRequestParams?: any): Observable<Recalculation>;

    /**
     * Create Reminder
     * 
     * @param outgoingInvoiceId 
     * @param reminderCreate 
     */
    createReminderOutgoingInvoiceReminderOutgoingInvoiceIdAddPost(outgoingInvoiceId: number, reminderCreate: ReminderCreate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Reminder
     * 
     * @param outgoingInvoiceId 
     */
    createReminderOutgoingInvoiceReminderOutgoingInvoiceIdRemovePost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Create Service
     * 
     * @param serviceCreate 
     */
    createServiceServicePost(serviceCreate: ServiceCreate, extraHttpRequestParams?: any): Observable<Service>;

    /**
     * Create Stock
     * 
     * @param stockCreate 
     */
    createStockStockPost(stockCreate: StockCreate, extraHttpRequestParams?: any): Observable<Stock>;

    /**
     * Create Supplier
     * 
     * @param supplierCreate 
     */
    createSupplierSupplierPost(supplierCreate: SupplierCreate, extraHttpRequestParams?: any): Observable<Supplier>;

    /**
     * Create Technical Data
     * 
     * @param technicalDataCreate 
     */
    createTechnicalDataTechnicalDataPost(technicalDataCreate: TechnicalDataCreate, extraHttpRequestParams?: any): Observable<TechnicalData>;

    /**
     * Create Template Paint
     * 
     * @param templatePaintCreate 
     */
    createTemplatePaintTemplatePaintPost(templatePaintCreate: TemplatePaintCreate, extraHttpRequestParams?: any): Observable<TemplatePaint>;

    /**
     * Create Unit
     * 
     * @param unitCreate 
     */
    createUnitUnitPost(unitCreate: UnitCreate, extraHttpRequestParams?: any): Observable<Unit>;

    /**
     * Create User
     * 
     * @param userCreate 
     */
    createUserUsersPost(userCreate: UserCreate, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Create Vat
     * 
     * @param vatCreate 
     */
    createVatVatPost(vatCreate: VatCreate, extraHttpRequestParams?: any): Observable<Vat>;

    /**
     * Create Work Day
     * 
     * @param userId 
     * @param workDayCreate 
     */
    createWorkDayWorkDayUserIdPost(userId: number, workDayCreate: WorkDayCreate, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Create Workload
     * 
     * @param workloadCreate 
     */
    createWorkloadWorkloadPost(workloadCreate: WorkloadCreate, extraHttpRequestParams?: any): Observable<Workload>;

    /**
     * Delete Additional Workload
     * 
     * @param additionalWorkloadId 
     */
    deleteAdditionalWorkloadAdditionalWorkloadAdditionalWorkloadIdDelete(additionalWorkloadId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Article
     * 
     * @param articleId 
     */
    deleteArticleArticleArticleIdDelete(articleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Calendar Entry
     * 
     * @param calendarId 
     */
    deleteCalendarEntryCalendarCalendarIdDelete(calendarId: number, extraHttpRequestParams?: any): Observable<CalendarEntry>;

    /**
     * Delete Category
     * 
     * @param categoryId 
     */
    deleteCategoryCategoryCategoryIdDelete(categoryId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Client
     * 
     * @param clientId 
     */
    deleteClientClientClientIdDelete(clientId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Delivery Note
     * 
     * @param deliveryNoteId 
     */
    deleteDeliveryNoteDeliveryNoteDeliveryNoteIdDelete(deliveryNoteId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Fee
     * 
     * @param feeId 
     */
    deleteFeeFeeFeeIdDelete(feeId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Info Page
     * 
     * @param id 
     */
    deleteInfoPageInfoPageIdDelete(id: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     */
    deleteIngoingInvoiceIngoingInvoiceIngoingInvoiceIdDelete(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Job
     * 
     * @param jobId 
     */
    deleteJobJobJobIdDelete(jobId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Journey
     * 
     * @param journeyId 
     */
    deleteJourneyJourneyJourneyIdDelete(journeyId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Meal
     * 
     * @param mealId 
     */
    deleteMealMealMealIdDelete(mealId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Note Entry
     * 
     * @param noteId 
     */
    deleteNoteEntryNoteNoteIdDelete(noteId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Offer
     * 
     * @param offerId 
     */
    deleteOfferOfferOfferIdDelete(offerId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Order Bundle
     * 
     * @param orderBundleId 
     */
    deleteOrderBundleOrderBundleOrderBundleIdDelete(orderBundleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Order
     * 
     * @param orderId 
     */
    deleteOrderOrderOrderIdDelete(orderId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Ordered Article
     * 
     * @param orderedArticleId 
     */
    deleteOrderedArticleOrderedArticleOrderedArticleIdDelete(orderedArticleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     */
    deleteOutgoingInvoiceOutgoingInvoiceOutgoingInvoiceIdDelete(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Recalculation
     * 
     * @param recalculationId 
     */
    deleteRecalculationRecalculationRecalculationIdDelete(recalculationId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Service
     * 
     * @param serviceId 
     */
    deleteServiceServiceServiceIdDelete(serviceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Stock
     * 
     * @param stockId 
     */
    deleteStockStockStockIdDelete(stockId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Supplier
     * 
     * @param supplierId 
     */
    deleteSupplierSupplierSupplierIdDelete(supplierId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Template Paint
     * 
     * @param templatePaintId 
     */
    deleteTemplatePaintTemplatePaintTemplatePaintIdDelete(templatePaintId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Unit
     * 
     * @param unitId 
     */
    deleteUnitUnitUnitIdDelete(unitId: number, extraHttpRequestParams?: any): Observable<Unit>;

    /**
     * Delete User
     * 
     * @param userId 
     */
    deleteUserUsersUserIdDelete(userId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Delete Vat
     * 
     * @param vatId 
     */
    deleteVatVatVatIdDelete(vatId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Finish Work Day By User
     * 
     * @param userId 
     * @param workDayFinish 
     */
    finishWorkDayByUserWorkDayFinishUserIdPost(userId: number, workDayFinish: WorkDayFinish, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Finish Work Day
     * 
     * @param workDayFinish 
     */
    finishWorkDayWorkDayFinishPost(workDayFinish: WorkDayFinish, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Generate Order Pdf
     * 
     * @param requestBody 
     */
    generateOrderPdfOrderPdfPost(requestBody: Array<number>, extraHttpRequestParams?: any): Observable<string>;

    /**
     * Get Available Work Day Actions By User
     * 
     * @param userId 
     */
    getAvailableWorkDayActionsByUserWorkDayAvailableActionsUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<WorkDayAction>;

    /**
     * Get Available Work Day Actions
     * 
     */
    getAvailableWorkDayActionsWorkDayAvailableActionsGet(extraHttpRequestParams?: any): Observable<WorkDayAction>;

    /**
     * Get Bulk Parameter By Key
     * 
     * @param requestBody 
     */
    getBulkParameterByKeyParameterBulkGetPost(requestBody: Array<string>, extraHttpRequestParams?: any): Observable<Array<Parameter>>;

    /**
     * Get Cars
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    getCarsCarGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Car>>;

    /**
     * Get Client Validation
     * 
     * @param clientId 
     */
    getClientValidationClientValidationClientIdGet(clientId: number, extraHttpRequestParams?: any): Observable<ClientValidation>;

    /**
     * Get Current Work Day By User
     * 
     * @param userId 
     */
    getCurrentWorkDayByUserWorkDayCurrentUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Get Current Work Day Length Minutes By User
     * 
     * @param userId 
     */
    getCurrentWorkDayLengthMinutesByUserWorkDayLenghtMinutesUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Get Current Work Day Length Minutes
     * 
     */
    getCurrentWorkDayLengthMinutesWorkDayLenghtMinutesGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Get Current Work Day
     * 
     */
    getCurrentWorkDayWorkDayCurrentGet(extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Get Eating Places
     * 
     * @param eatingPlaceId 
     */
    getEatingPlacesEatingPlaceEatingPlaceIdGet(eatingPlaceId: number, extraHttpRequestParams?: any): Observable<EatingPlace>;

    /**
     * Get Eating Places
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    getEatingPlacesEatingPlaceGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<EatingPlace>>;

    /**
     * Get Finished Work Day By User
     * 
     * @param userId 
     */
    getFinishedWorkDayByUserWorkDayFinishedUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Get Finished Work Day
     * 
     */
    getFinishedWorkDayWorkDayFinishedGet(extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Get Next Delivery Note Number
     * 
     */
    getNextDeliveryNoteNumberDeliveryNoteNumberGet(extraHttpRequestParams?: any): Observable<string>;

    /**
     * Get Parameter
     * 
     * @param key 
     */
    getParameterParameterKeyGet(key: string, extraHttpRequestParams?: any): Observable<string>;

    /**
     * Get Rights
     * 
     * @param skip 
     * @param limit 
     */
    getRightsRightsGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Right>>;

    /**
     * Get Status Options
     * 
     */
    getStatusOptionsJobStatusOptionsGet(extraHttpRequestParams?: any): Observable<Array<JobStatus>>;

    /**
     * Get Work Day
     * 
     * @param workDayId 
     */
    getWorkDayWorkDayWorkDayIdGet(workDayId: number, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Get Work Days By User
     * 
     * @param userId 
     * @param skip 
     * @param limit 
     */
    getWorkDaysByUserWorkDayUserUserIdGet(userId: number, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<WorkDay>>;

    /**
     * Grant Rights To User
     * 
     * @param userId 
     * @param requestBody 
     */
    grantRightsToUserUsersRightsUserIdPost(userId: number, requestBody: Array<string>, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Initialize
     * 
     * @param key 
     */
    initializeInitKeyGet(key: string, extraHttpRequestParams?: any): Observable<any>;

    /**
     * Islocked Client
     * 
     * @param clientId 
     */
    islockedClientClientIslockedClientIdGet(clientId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Delivery Note
     * 
     * @param deliveryNoteId 
     */
    islockedDeliveryNoteDeliveryNoteIslockedDeliveryNoteIdGet(deliveryNoteId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     */
    islockedIngoingInvoiceIngoingInvoiceIslockedIngoingInvoiceIdGet(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Job
     * 
     * @param jobId 
     */
    islockedJobJobIslockedJobIdGet(jobId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Offer
     * 
     * @param offerId 
     */
    islockedOfferOfferIslockedOfferIdGet(offerId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Order Bundle
     * 
     * @param orderBundleId 
     */
    islockedOrderBundleOrderBundleIslockedOrderBundleIdGet(orderBundleId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Order
     * 
     * @param orderId 
     */
    islockedOrderOrderIslockedOrderIdGet(orderId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     */
    islockedOutgoingInvoiceOutgoingInvoiceIslockedOutgoingInvoiceIdGet(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Recalculation
     * 
     * @param recalculationId 
     */
    islockedRecalculationRecalculationIslockedRecalculationIdGet(recalculationId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Stock
     * 
     * @param stockId 
     */
    islockedStockStockIslockedStockIdGet(stockId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked Supplier
     * 
     * @param supplierId 
     */
    islockedSupplierSupplierIslockedSupplierIdGet(supplierId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Islocked User
     * 
     * @param userId 
     */
    islockedUserUsersIslockedUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<Lock>;

    /**
     * Lock Article
     * 
     * @param articleId 
     */
    lockArticleArticleLockArticleIdPost(articleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Article
     * 
     * @param articleId 
     */
    lockArticleArticleUnlockArticleIdPost(articleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Client
     * 
     * @param clientId 
     */
    lockClientClientLockClientIdPost(clientId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Delivery Note
     * 
     * @param deliveryNoteId 
     */
    lockDeliveryNoteDeliveryNoteLockDeliveryNoteIdPost(deliveryNoteId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     */
    lockIngoingInvoiceIngoingInvoiceLockIngoingInvoiceIdPost(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Job
     * 
     * @param jobId 
     */
    lockJobJobLockJobIdPost(jobId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Offer
     * 
     * @param offerId 
     */
    lockOfferOfferLockOfferIdPost(offerId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Offer
     * 
     * @param offerId 
     */
    lockOfferOfferUnlockOfferIdPost(offerId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Order Bundle
     * 
     * @param orderBundleId 
     */
    lockOrderBundleOrderBundleLockOrderBundleIdPost(orderBundleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Order
     * 
     * @param orderId 
     */
    lockOrderOrderLockOrderIdPost(orderId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Order
     * 
     * @param orderId 
     */
    lockOrderOrderUnlockOrderIdPost(orderId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     */
    lockOutgoingInvoiceOutgoingInvoiceLockOutgoingInvoiceIdPost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Recalculation
     * 
     * @param recalculationId 
     */
    lockRecalculationRecalculationLockRecalculationIdPost(recalculationId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Stock
     * 
     * @param stockId 
     */
    lockStockStockLockStockIdPost(stockId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Supplier
     * 
     * @param supplierId 
     */
    lockSupplierSupplierLockSupplierIdPost(supplierId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Unit
     * 
     * @param unitId 
     */
    lockUnitUnitLockUnitIdPost(unitId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock Unit
     * 
     * @param unitId 
     */
    lockUnitUnitUnlockUnitIdPost(unitId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Lock User
     * 
     * @param userId 
     */
    lockUserUsersLockUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Logged In
     * 
     */
    loggedInTokenValidationGet(extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Login For Access Token Simple
     * 
     * @param username 
     * @param password 
     */
    loginForAccessTokenSimpleTokenSimplePost(username: string, password: string, extraHttpRequestParams?: any): Observable<Token>;

    /**
     * Login For Access Token
     * 
     * @param username 
     * @param password 
     * @param allScopes 
     * @param grantType 
     * @param scope 
     * @param clientId 
     * @param clientSecret 
     */
    loginForAccessTokenTokenPost(username: string, password: string, allScopes?: boolean, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, extraHttpRequestParams?: any): Observable<Token>;

    /**
     * Move Ordered Articles
     * 
     * @param oldOrderId 
     * @param newOrderableToId 
     * @param requestBody 
     */
    moveOrderedArticlesOrderMoveOldOrderIdNewOrderableToIdPost(oldOrderId: number, newOrderableToId: number, requestBody: Array<number>, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Patch Article
     * 
     * @param articleId 
     * @param articleUpdate 
     */
    patchArticleArticleArticleIdPatch(articleId: number, articleUpdate: ArticleUpdate, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Patch Path
     * 
     * @param jobId 
     * @param path 
     */
    patchPathJobPathJobIdPut(jobId: number, path: string, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Pay
     * 
     * @param ingoingInvoiceId 
     */
    payIngoingInvoicePaymentIngoingInvoiceIdPayPost(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<IngoingInvoice>;

    /**
     * Pay
     * 
     * @param outgoingInvoiceId 
     */
    payOutgoingInvoicePaymentOutgoingInvoiceIdPayPost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Pdf Gen Delivery Note Test
     * 
     */
    pdfGenDeliveryNoteTestPdfDeliveryDocketGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Pdf Gen Invoice Test
     * 
     */
    pdfGenInvoiceTestPdfInvoiceGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Pdf Gen Offer Test
     * 
     */
    pdfGenOfferTestPdfOfferGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Pdf Gen Order Test
     * 
     */
    pdfGenOrderTestPdfOrderGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Pdf Gen Recalculation Test
     * 
     */
    pdfGenRecalculationTestPdfRecalculationGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Read Additional Workload Count
     * 
     * @param userId 
     */
    readAdditionalWorkloadCountAdditionalWorkloadCountGet(userId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Additional Workloads
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param userId 
     */
    readAdditionalWorkloadsAdditionalWorkloadGet(skip?: number, limit?: number, filterString?: string, userId?: number, extraHttpRequestParams?: any): Observable<Array<AdditionalWorkload>>;

    /**
     * Read Article
     * 
     * @param articleId 
     */
    readArticleArticleArticleIdGet(articleId: number, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Read Article Count By Stock
     * 
     * @param stockId 
     */
    readArticleCountByStockArticleStockCountStockIdGet(stockId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Article Count By Supplier
     * 
     * @param supplierId 
     */
    readArticleCountBySupplierArticleSupplierCountSupplierIdGet(supplierId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Articles
     * 
     * @param skip 
     * @param limit 
     */
    readArticlesArticleGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Article>>;

    /**
     * Read Articles By Stock
     * 
     * @param stockId 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readArticlesByStockArticleStockStockIdGet(stockId: number, skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Article>>;

    /**
     * Read Articles By Supplier
     * 
     * @param supplierId 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readArticlesBySupplierArticleSupplierSupplierIdGet(supplierId: number, skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Article>>;

    /**
     * Read Calendar Entries By Day
     * 
     * @param calendarId 
     * @param day 
     */
    readCalendarEntriesByDayCalendarCalendarsCalendarIdGet(calendarId: number, day: number, extraHttpRequestParams?: any): Observable<Array<CalendarEntry>>;

    /**
     * Read Calendar Entries By Day Me
     * 
     * @param day 
     */
    readCalendarEntriesByDayMeCalendarMeGet(day: number, extraHttpRequestParams?: any): Observable<Array<CalendarEntry>>;

    /**
     * Read Calendar Entries By Key
     * 
     * @param calendarKey 
     * @param fromDate 
     * @param toDate 
     */
    readCalendarEntriesByKeyCalendarKeyCalendarKeyGet(calendarKey: string, fromDate: string, toDate: string, extraHttpRequestParams?: any): Observable<Array<CalendarEntry>>;

    /**
     * Read Calendar Entry
     * 
     * @param calendarEntryId 
     */
    readCalendarEntryCalendarCalendarEntryIdGet(calendarEntryId: number, extraHttpRequestParams?: any): Observable<CalendarEntry>;

    /**
     * Read Calendars
     * 
     */
    readCalendarsCalendarGet(extraHttpRequestParams?: any): Observable<Array<Calendar>>;

    /**
     * Read Categories
     * 
     * @param skip 
     * @param limit 
     */
    readCategoriesCategoryGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Category>>;

    /**
     * Read Chat Messages Since Id
     * 
     * @param lastId 
     */
    readChatMessagesSinceIdChatsLastIdGet(lastId: number, extraHttpRequestParams?: any): Observable<Array<ChatMessage>>;

    /**
     * Read Chat Recipients
     * 
     */
    readChatRecipientsChatsRecipientsGet(extraHttpRequestParams?: any): Observable<Array<ChatRecipient>>;

    /**
     * Read Client
     * 
     * @param clientId 
     */
    readClientClientClientIdGet(clientId: number, extraHttpRequestParams?: any): Observable<Client>;

    /**
     * Read Client Count
     * 
     */
    readClientCountClientCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Clients
     * 
     * @param skip 
     * @param limit 
     * @param filter 
     * @param privateOnly 
     * @param companyOnly 
     */
    readClientsClientGet(skip?: number, limit?: number, filter?: string, privateOnly?: boolean, companyOnly?: boolean, extraHttpRequestParams?: any): Observable<Array<Client>>;

    /**
     * Read Contact
     * 
     * @param contactId 
     * @param skip 
     * @param limit 
     */
    readContactContactContactIdGet(contactId: number, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Contact>>;

    /**
     * Read Contact Count
     * 
     */
    readContactCountContactCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Contacts
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readContactsContactGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Contact>>;

    /**
     * Read Count Of Order Bundle By Supplier And Status
     * 
     * @param supplierId 
     * @param orderStatus 
     * @param request 
     */
    readCountOfOrderBundleBySupplierAndStatusOrderBundleSupplierSupplierIdCountGet(supplierId: number, orderStatus?: OrderStatusType, request?: boolean, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Countries
     * 
     * @param skip 
     * @param limit 
     */
    readCountriesAddressCountriesGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Country>>;

    /**
     * Read Credential Count
     * 
     */
    readCredentialCountCredentialCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Credential
     * 
     * @param credentialId 
     * @param skip 
     * @param limit 
     */
    readCredentialCredentialCredentialIdGet(credentialId: number, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Credential>>;

    /**
     * Read Credentials
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readCredentialsCredentialGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Credential>>;

    /**
     * Read Delivery Note Count
     * 
     * @param jobId 
     * @param userId 
     */
    readDeliveryNoteCountDeliveryNoteCountGet(jobId?: number, userId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Delivery Note
     * 
     * @param deliveryNoteId 
     */
    readDeliveryNoteDeliveryNoteDeliveryNoteIdGet(deliveryNoteId: number, extraHttpRequestParams?: any): Observable<DeliveryNote>;

    /**
     * Read Delivery Note Reason
     * 
     * @param deliveryNoteReasonId 
     */
    readDeliveryNoteReasonDeliveryNoteReasonDeliveryNoteReasonIdGet(deliveryNoteReasonId: number, extraHttpRequestParams?: any): Observable<DeliveryNoteReason>;

    /**
     * Read Delivery Note Reasons
     * 
     */
    readDeliveryNoteReasonsDeliveryNoteReasonsGet(extraHttpRequestParams?: any): Observable<Array<DeliveryNoteReason>>;

    /**
     * Read Delivery Notes
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param jobId 
     * @param userId 
     */
    readDeliveryNotesDeliveryNoteGet(skip?: number, limit?: number, filterString?: string, jobId?: number, userId?: number, extraHttpRequestParams?: any): Observable<Array<DeliveryNote>>;

    /**
     * Read Expense Count
     * 
     * @param recalculationId 
     */
    readExpenseCountExpenseCountGet(recalculationId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Expenses
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param recalculationId 
     */
    readExpensesExpenseGet(skip?: number, limit?: number, filterString?: string, recalculationId?: number, extraHttpRequestParams?: any): Observable<Array<Expense>>;

    /**
     * Read Fee Count
     * 
     * @param userId 
     */
    readFeeCountFeeCountGet(userId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Fees
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param userId 
     */
    readFeesFeeGet(skip?: number, limit?: number, filterString?: string, userId?: number, extraHttpRequestParams?: any): Observable<Array<Fee>>;

    /**
     * Read Genders
     * 
     * @param skip 
     * @param limit 
     */
    readGendersGenderGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Gender>>;

    /**
     * Read Info Page
     * 
     * @param id 
     */
    readInfoPageInfoPageIdGet(id: number, extraHttpRequestParams?: any): Observable<InfoPage>;

    /**
     * Read Info Pages
     * 
     * @param skip 
     * @param limit 
     */
    readInfoPagesInfoPageGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<InfoPage>>;

    /**
     * Read Ingoing Invoices
     * 
     * @param skip 
     * @param limit 
     * @param filter 
     * @param paid 
     */
    readIngoingInvoicesIngoingInvoiceGet(skip?: number, limit?: number, filter?: string, paid?: boolean, extraHttpRequestParams?: any): Observable<Array<IngoingInvoice>>;

    /**
     * Read Job Count
     * 
     * @param status 
     * @param excludeSubjobs 
     * @param clientId 
     */
    readJobCountJobCountGet(status?: JobStatusType, excludeSubjobs?: boolean, clientId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Job
     * 
     * @param jobId 
     */
    readJobJobJobIdGet(jobId: number, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Read Job Status
     * 
     * @param jobId 
     */
    readJobStatusJobStatusJobIdGet(jobId: number, extraHttpRequestParams?: any): Observable<JobStatus>;

    /**
     * Read Jobs
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param clientId 
     * @param statuses 
     * @param excludeSubjobs 
     */
    readJobsJobGet(skip?: number, limit?: number, filterString?: string, clientId?: number, statuses?: string, excludeSubjobs?: boolean, extraHttpRequestParams?: any): Observable<Array<Job>>;

    /**
     * Read Journey Count
     * 
     * @param userId 
     */
    readJourneyCountJourneyCountGet(userId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Journeys
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param userId 
     */
    readJourneysJourneyGet(skip?: number, limit?: number, filterString?: string, userId?: number, extraHttpRequestParams?: any): Observable<Array<Journey>>;

    /**
     * Read Languages
     * 
     * @param skip 
     * @param limit 
     */
    readLanguagesLanguageGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Language>>;

    /**
     * Read Maintenance Count
     * 
     * @param userId 
     */
    readMaintenanceCountMaintenanceCountGet(userId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Maintenance
     * 
     * @param maintenanceId 
     */
    readMaintenanceMaintenanceMaintenanceIdGet(maintenanceId: number, extraHttpRequestParams?: any): Observable<Array<Maintenance>>;

    /**
     * Read Maintenances
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param userId 
     */
    readMaintenancesMaintenanceGet(skip?: number, limit?: number, filterString?: string, userId?: number, extraHttpRequestParams?: any): Observable<Array<Maintenance>>;

    /**
     * Read Meal Count
     * 
     * @param userId 
     * @param eatingPlaceId 
     */
    readMealCountMealCountGet(userId?: number, eatingPlaceId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Meal Sums
     * 
     */
    readMealSumsMealSumCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Meal Sums
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readMealSumsMealSumGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<MealSum>>;

    /**
     * Read Meals
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param userId 
     * @param eatingPlaceId 
     */
    readMealsMealGet(skip?: number, limit?: number, filterString?: string, userId?: number, eatingPlaceId?: number, extraHttpRequestParams?: any): Observable<Array<Meal>>;

    /**
     * Read Note Entries
     * 
     */
    readNoteEntriesNoteGet(extraHttpRequestParams?: any): Observable<Array<Note>>;

    /**
     * Read Offer
     * 
     * @param offerId 
     * @param skip 
     * @param limit 
     */
    readOfferOfferOfferIdGet(offerId: number, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Offer>;

    /**
     * Read Offers By Job
     * 
     * @param jobId 
     * @param filterString 
     * @param skip 
     * @param limit 
     */
    readOffersByJobOfferJobJobIdGet(jobId: number, filterString?: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Offer>>;

    /**
     * Read Offers
     * 
     * @param skip 
     * @param limit 
     */
    readOffersOfferGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Offer>>;

    /**
     * Read Order Bundle By Supplier
     * 
     * @param supplierId 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param orderStatus 
     * @param request 
     */
    readOrderBundleBySupplierOrderBundleSupplierSupplierIdGet(supplierId: number, skip?: number, limit?: number, filterString?: string, orderStatus?: OrderStatusType, request?: boolean, extraHttpRequestParams?: any): Observable<Array<OrderBundle>>;

    /**
     * Read Order Bundle
     * 
     * @param orderBundleId 
     */
    readOrderBundleOrderBundleOrderBundleIdGet(orderBundleId: number, extraHttpRequestParams?: any): Observable<OrderBundle>;

    /**
     * Read Order Count
     * 
     * @param supplierId 
     * @param orderStatus 
     */
    readOrderCountOrderSupplierSupplierIdCountGet(supplierId: number, orderStatus?: OrderStatusType, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Order From To
     * 
     * @param orderableFromId 
     * @param orderableToId 
     */
    readOrderFromToOrderFromOrderableFromIdToOrderableToIdGet(orderableFromId: number, orderableToId: number, extraHttpRequestParams?: any): Observable<Order>;

    /**
     * Read Order
     * 
     * @param orderId 
     */
    readOrderOrderOrderIdGet(orderId: number, extraHttpRequestParams?: any): Observable<Order>;

    /**
     * Read Ordered Article Count By Job
     * 
     * @param jobId 
     */
    readOrderedArticleCountByJobOrderedArticleJobJobIdCountGet(jobId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Ordered Article Count By Order
     * 
     * @param orderId 
     */
    readOrderedArticleCountByOrderOrderedArticleOrderOrderIdCountGet(orderId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Ordered Article
     * 
     * @param orderedArticleId 
     */
    readOrderedArticleOrderedArticleOrderedArticleIdGet(orderedArticleId: number, extraHttpRequestParams?: any): Observable<OrderedArticle>;

    /**
     * Read Ordered Articles By Job
     * 
     * @param jobId 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readOrderedArticlesByJobOrderedArticleJobJobIdGet(jobId: number, skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<OrderedArticle>>;

    /**
     * Read Ordered Articles By Order
     * 
     * @param orderId 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param sortPosition 
     */
    readOrderedArticlesByOrderOrderedArticleOrderOrderIdGet(orderId: number, skip?: number, limit?: number, filterString?: string, sortPosition?: boolean, extraHttpRequestParams?: any): Observable<Array<OrderedArticle>>;

    /**
     * Read Orders By Order Bundle
     * 
     * @param orderBundleId 
     */
    readOrdersByOrderBundleOrderBundleOrdersOrderBundleIdCountGet(orderBundleId: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Orders By Order Bundle
     * 
     * @param orderBundleId 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readOrdersByOrderBundleOrderBundleOrdersOrderBundleIdGet(orderBundleId: number, skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Order>>;

    /**
     * Read Orders From Count
     * 
     * @param orderableFromId 
     * @param status 
     */
    readOrdersFromCountOrderFromOrderableFromIdCountGet(orderableFromId: number, status?: OrderStatusType, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Orders From
     * 
     * @param orderableFromId 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param status 
     */
    readOrdersFromOrderFromOrderableFromIdGet(orderableFromId: number, skip?: number, limit?: number, filterString?: string, status?: OrderStatusType, extraHttpRequestParams?: any): Observable<Array<Order>>;

    /**
     * Read Orders
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readOrdersOrderGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Order>>;

    /**
     * Read Orders Supplier
     * 
     * @param supplierId 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param orderStatus 
     * @param request 
     */
    readOrdersSupplierOrderSupplierSupplierIdGet(supplierId: number, skip?: number, limit?: number, filterString?: string, orderStatus?: OrderStatusType, request?: boolean, extraHttpRequestParams?: any): Observable<Array<Order>>;

    /**
     * Read Orders To Count
     * 
     * @param orderableToId 
     * @param status 
     */
    readOrdersToCountOrderToOrderableToIdCountGet(orderableToId: number, status?: OrderStatusType, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Orders To
     * 
     * @param orderableToId 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param status 
     */
    readOrdersToOrderToOrderableToIdGet(orderableToId: number, skip?: number, limit?: number, filterString?: string, status?: OrderStatusType, extraHttpRequestParams?: any): Observable<Array<Order>>;

    /**
     * Read Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     * @param skip 
     * @param limit 
     */
    readOutgoingInvoiceOutgoingInvoiceOutgoingInvoiceIdGet(outgoingInvoiceId: number, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Read Outgoing Invoices By Job
     * 
     * @param jobId 
     * @param filterString 
     * @param skip 
     * @param limit 
     */
    readOutgoingInvoicesByJobOutgoingInvoiceJobJobIdGet(jobId: number, filterString?: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<OutgoingInvoice>>;

    /**
     * Read Outgoing Invoices
     * 
     * @param skip 
     * @param filterString 
     * @param limit 
     * @param paid 
     */
    readOutgoingInvoicesOutgoingInvoiceGet(skip?: number, filterString?: string, limit?: number, paid?: boolean, extraHttpRequestParams?: any): Observable<Array<OutgoingInvoice>>;

    /**
     * Read Paint Count
     * 
     * @param recalculationId 
     */
    readPaintCountPaintCountGet(recalculationId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Paints
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param recalculationId 
     */
    readPaintsPaintGet(skip?: number, limit?: number, filterString?: string, recalculationId?: number, extraHttpRequestParams?: any): Observable<Array<Paint>>;

    /**
     * Read Parameters
     * 
     * @param skip 
     * @param limit 
     */
    readParametersParameterGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Parameter>>;

    /**
     * Read Price Count
     * 
     */
    readPriceCountPriceCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Price
     * 
     * @param priceId 
     * @param skip 
     * @param limit 
     */
    readPricePricePriceIdGet(priceId: number, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Price>>;

    /**
     * Read Prices
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readPricesPriceGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Price>>;

    /**
     * Read Recalculation By Job
     * 
     * @param jobId 
     */
    readRecalculationByJobRecalculationJobJobIdGet(jobId: number, extraHttpRequestParams?: any): Observable<Recalculation>;

    /**
     * Read Recalculation
     * 
     * @param recalculationId 
     */
    readRecalculationRecalculationRecalculationIdGet(recalculationId: number, extraHttpRequestParams?: any): Observable<Recalculation>;

    /**
     * Read Service Count
     * 
     * @param userId 
     */
    readServiceCountServiceCountGet(userId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Service
     * 
     * @param serviceId 
     */
    readServiceServiceServiceIdGet(serviceId: number, extraHttpRequestParams?: any): Observable<Service>;

    /**
     * Read Service Sum Count
     * 
     */
    readServiceSumCountServiceSumCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Service Sums
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readServiceSumsServiceSumGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<ServiceSum>>;

    /**
     * Read Services
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param userId 
     */
    readServicesServiceGet(skip?: number, limit?: number, filterString?: string, userId?: number, extraHttpRequestParams?: any): Observable<Array<Service>>;

    /**
     * Read Stock Count
     * 
     */
    readStockCountStockCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Stock
     * 
     * @param stockId 
     */
    readStockStockStockIdGet(stockId: number, extraHttpRequestParams?: any): Observable<Stock>;

    /**
     * Read Stocks
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readStocksStockGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<Stock>>;

    /**
     * Read Subjob Count By Job
     * 
     * @param jobId 
     * @param filter 
     * @param skip 
     * @param limit 
     */
    readSubjobCountByJobJobSubjobCountByJobJobIdGet(jobId: number, filter?: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Subjobs By Job
     * 
     * @param jobId 
     * @param filter 
     * @param skip 
     * @param limit 
     */
    readSubjobsByJobJobSubjobByJobJobIdGet(jobId: number, filter?: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Job>>;

    /**
     * Read Supplier Count
     * 
     */
    readSupplierCountSupplierCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Supplier
     * 
     * @param supplierId 
     */
    readSupplierSupplierSupplierIdGet(supplierId: number, extraHttpRequestParams?: any): Observable<Supplier>;

    /**
     * Read Suppliers
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param favoritesFirst 
     */
    readSuppliersSupplierGet(skip?: number, limit?: number, filterString?: any, favoritesFirst?: boolean, extraHttpRequestParams?: any): Observable<Array<Supplier>>;

    /**
     * Read Technical Data Count
     * 
     */
    readTechnicalDataCountTechnicalDataCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Technical Data
     * 
     * @param technicalDataId 
     * @param skip 
     * @param limit 
     */
    readTechnicalDataTechnicalDataTechnicalDataIdGet(technicalDataId: number, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<TechnicalData>>;

    /**
     * Read Technical Datas
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     */
    readTechnicalDatasTechnicalDataGet(skip?: number, limit?: number, filterString?: string, extraHttpRequestParams?: any): Observable<Array<TechnicalData>>;

    /**
     * Read Template Paint Count
     * 
     */
    readTemplatePaintCountTemplatePaintCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Template Paint
     * 
     * @param templatePaintId 
     */
    readTemplatePaintTemplatePaintTemplatePaintIdGet(templatePaintId: number, extraHttpRequestParams?: any): Observable<TemplatePaint>;

    /**
     * Read Template Paints
     * 
     * @param skip 
     * @param limit 
     */
    readTemplatePaintsTemplatePaintGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<TemplatePaint>>;

    /**
     * Read Units
     * 
     * @param skip 
     * @param limit 
     */
    readUnitsUnitGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Unit>>;

    /**
     * Read User Count
     * 
     * @param employeesOnly 
     */
    readUserCountUsersCountGet(employeesOnly?: boolean, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read User Count
     * 
     */
    readUserCountUsersEmployeeCountGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read User Count
     * 
     */
    readUserCountUsersEmployeeGet(extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read User
     * 
     * @param userId 
     */
    readUserUsersUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Read Users Me
     * 
     */
    readUsersMeUsersMeGet(extraHttpRequestParams?: any): Observable<User>;

    /**
     * Read Users
     * 
     * @param skip 
     * @param filterString 
     * @param limit 
     * @param employeesOnly 
     */
    readUsersUsersGet(skip?: number, filterString?: string, limit?: number, employeesOnly?: boolean, extraHttpRequestParams?: any): Observable<Array<User>>;

    /**
     * Read Vat By Amount
     * 
     * @param vatAmount 
     */
    readVatByAmountVatVatAmountGet(vatAmount: number, extraHttpRequestParams?: any): Observable<Vat>;

    /**
     * Read Vats
     * 
     * @param skip 
     * @param limit 
     */
    readVatsVatGet(skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<Vat>>;

    /**
     * Read Wood List Count
     * 
     * @param recalculationId 
     */
    readWoodListCountWoodListCountGet(recalculationId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Wood Lists
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param recalculationId 
     */
    readWoodListsWoodListGet(skip?: number, limit?: number, filterString?: string, recalculationId?: number, extraHttpRequestParams?: any): Observable<Array<WoodList>>;

    /**
     * Read Workload By User And Job
     * 
     * @param userId 
     * @param jobId 
     */
    readWorkloadByUserAndJobWorkloadUserJobUserIdJobIdGet(userId: number, jobId: number, extraHttpRequestParams?: any): Observable<Workload>;

    /**
     * Read Workload Count
     * 
     * @param userId 
     * @param jobId 
     */
    readWorkloadCountWorkloadCountGet(userId?: number, jobId?: number, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Read Workloads
     * 
     * @param skip 
     * @param limit 
     * @param filterString 
     * @param userId 
     * @param jobId 
     */
    readWorkloadsWorkloadGet(skip?: number, limit?: number, filterString?: string, userId?: number, jobId?: number, extraHttpRequestParams?: any): Observable<Array<Workload>>;

    /**
     * Regenerate Order Bundle Pdf
     * 
     * @param orderBundleId 
     */
    regenerateOrderBundlePdfOrderBundlePdfOrderBundleIdPut(orderBundleId: number, extraHttpRequestParams?: any): Observable<OrderBundle>;

    /**
     * Reset
     * 
     */
    resetResetGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Root
     * 
     */
    rootGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Set Bulk Parameter By Key
     * 
     * @param parameterCreate 
     */
    setBulkParameterByKeyParameterBulkSetPost(parameterCreate: Array<ParameterCreate>, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Set Parameter
     * 
     * @param parameterCreate 
     */
    setParameterParameterPost(parameterCreate: ParameterCreate, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Start Work Phase By User
     * 
     * @param userId 
     * @param workDayStart 
     */
    startWorkPhaseByUserWorkDayStartUserIdPost(userId: number, workDayStart: WorkDayStart, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Start Work Phase
     * 
     * @param workDayStart 
     */
    startWorkPhaseWorkDayStartPost(workDayStart: WorkDayStart, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Stop Work Phase By User
     * 
     * @param userId 
     * @param workDayStop 
     */
    stopWorkPhaseByUserWorkDayStopUserIdPost(userId: number, workDayStop: WorkDayStop, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Stop Work Phase
     * 
     * @param workDayStop 
     */
    stopWorkPhaseWorkDayStopPost(workDayStop: WorkDayStop, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Test Archive Work Days
     * 
     */
    testArchiveWorkDaysTestArchiveWorkDaysGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Test Csv
     * 
     */
    testCsvTestCsvGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Test Mail
     * 
     */
    testMailTestMailGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Test Reusable
     * 
     */
    testReusableTestReusableGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Test
     * 
     */
    testTestGet(extraHttpRequestParams?: any): Observable<any>;

    /**
     * Toggle Article Favorite
     * 
     * @param articleId 
     */
    toggleArticleFavoriteArticleFavoriteArticleIdPost(articleId: number, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Toggle Supplier Favorite
     * 
     * @param supplierId 
     */
    toggleSupplierFavoriteSupplierFavoriteSupplierIdPost(supplierId: number, extraHttpRequestParams?: any): Observable<Supplier>;

    /**
     * Unlock Client
     * 
     * @param clientId 
     */
    unlockClientClientUnlockClientIdPost(clientId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Delivery Note
     * 
     * @param deliveryNoteId 
     */
    unlockDeliveryNoteDeliveryNoteUnlockDeliveryNoteIdPost(deliveryNoteId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     */
    unlockIngoingInvoiceIngoingInvoiceUnlockIngoingInvoiceIdPost(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Job
     * 
     * @param jobId 
     */
    unlockJobJobUnlockJobIdPost(jobId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Order Bundle
     * 
     * @param orderBundleId 
     */
    unlockOrderBundleOrderBundleUnlockOrderBundleIdPost(orderBundleId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     */
    unlockOutgoingInvoiceOutgoingInvoiceUnlockOutgoingInvoiceIdPost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Recalculation
     * 
     * @param recalculationId 
     */
    unlockRecalculationRecalculationUnlockRecalculationIdPost(recalculationId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Stock
     * 
     * @param stockId 
     */
    unlockStockStockUnlockStockIdPost(stockId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock Supplier
     * 
     * @param supplierId 
     */
    unlockSupplierSupplierUnlockSupplierIdPost(supplierId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unlock User
     * 
     * @param userId 
     */
    unlockUserUsersUnlockUserIdGet(userId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Unpay
     * 
     * @param ingoingInvoiceId 
     */
    unpayIngoingInvoicePaymentIngoingInvoiceIdUnpayPost(ingoingInvoiceId: number, extraHttpRequestParams?: any): Observable<IngoingInvoice>;

    /**
     * Unpay
     * 
     * @param outgoingInvoiceId 
     */
    unpayOutgoingInvoicePaymentOutgoingInvoiceIdUnpayPost(outgoingInvoiceId: number, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Update Article
     * 
     * @param articleId 
     * @param articleUpdateFull 
     */
    updateArticleArticleArticleIdPut(articleId: number, articleUpdateFull: ArticleUpdateFull, extraHttpRequestParams?: any): Observable<Article>;

    /**
     * Update Calendar Entry
     * 
     * @param calendarEntryId 
     * @param calendarEntryCreate 
     */
    updateCalendarEntryCalendarCalendarEntryIdPut(calendarEntryId: number, calendarEntryCreate: CalendarEntryCreate, extraHttpRequestParams?: any): Observable<CalendarEntry>;

    /**
     * Update Category
     * 
     * @param categoryId 
     * @param categoryCreate 
     */
    updateCategoryCategoryCategoryIdPut(categoryId: number, categoryCreate: CategoryCreate, extraHttpRequestParams?: any): Observable<Category>;

    /**
     * Update Client
     * 
     * @param clientId 
     * @param clientCreate 
     */
    updateClientClientClientIdPut(clientId: number, clientCreate: ClientCreate, extraHttpRequestParams?: any): Observable<Client>;

    /**
     * Update Contact
     * 
     * @param contactId 
     * @param contactUpdate 
     */
    updateContactContactContactIdPut(contactId: number, contactUpdate: ContactUpdate, extraHttpRequestParams?: any): Observable<Contact>;

    /**
     * Update Credential
     * 
     * @param credentialId 
     * @param credentialUpdate 
     */
    updateCredentialCredentialCredentialIdPut(credentialId: number, credentialUpdate: CredentialUpdate, extraHttpRequestParams?: any): Observable<Credential>;

    /**
     * Update Delivery Note
     * 
     * @param deliveryNoteId 
     * @param deliveryNoteUpdate 
     */
    updateDeliveryNoteDeliveryNoteDeliveryNoteIdPut(deliveryNoteId: number, deliveryNoteUpdate: DeliveryNoteUpdate, extraHttpRequestParams?: any): Observable<DeliveryNote>;

    /**
     * Update Info Page
     * 
     * @param id 
     * @param infoPageUpdate 
     */
    updateInfoPageInfoPageIdPut(id: number, infoPageUpdate: InfoPageUpdate, extraHttpRequestParams?: any): Observable<InfoPage>;

    /**
     * Update Ingoing Invoice
     * 
     * @param ingoingInvoiceId 
     * @param ingoingInvoiceCreate 
     */
    updateIngoingInvoiceIngoingInvoiceIngoingInvoiceIdPut(ingoingInvoiceId: number, ingoingInvoiceCreate: IngoingInvoiceCreate, extraHttpRequestParams?: any): Observable<IngoingInvoice>;

    /**
     * Update Job
     * 
     * @param jobId 
     * @param jobUpdate 
     */
    updateJobJobJobIdPut(jobId: number, jobUpdate: JobUpdate, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Update Job Status
     * 
     * @param jobId 
     * @param jobStatus 
     */
    updateJobStatusJobStatusJobIdPost(jobId: number, jobStatus: JobStatusType, extraHttpRequestParams?: any): Observable<JobStatusType>;

    /**
     * Update Maintenance
     * 
     * @param maintenanceId 
     * @param maintenanceUpdate 
     */
    updateMaintenanceMaintenanceMaintenanceIdPost(maintenanceId: number, maintenanceUpdate: MaintenanceUpdate, extraHttpRequestParams?: any): Observable<Maintenance>;

    /**
     * Update Note Entry
     * 
     * @param noteId 
     * @param noteUpdate 
     */
    updateNoteEntryNoteNoteIdPut(noteId: number, noteUpdate: NoteUpdate, extraHttpRequestParams?: any): Observable<Note>;

    /**
     * Update Offer
     * 
     * @param offerId 
     * @param offerUpdate 
     */
    updateOfferOfferOfferIdPut(offerId: number, offerUpdate: OfferUpdate, extraHttpRequestParams?: any): Observable<Offer>;

    /**
     * Update Order
     * 
     * @param orderId 
     * @param orderUpdate 
     */
    updateOrderOrderOrderIdPut(orderId: number, orderUpdate: OrderUpdate, extraHttpRequestParams?: any): Observable<Order>;

    /**
     * Update Ordered Article
     * 
     * @param orderedArticleId 
     * @param orderedArticleCreate 
     */
    updateOrderedArticleOrderedArticleOrderedArticleIdPut(orderedArticleId: number, orderedArticleCreate: OrderedArticleCreate, extraHttpRequestParams?: any): Observable<OrderedArticle>;

    /**
     * Update Ordered Article Price
     * 
     * @param orderedArticlePriceUpdate 
     */
    updateOrderedArticlePriceOrderedArticlePricePut(orderedArticlePriceUpdate: Array<OrderedArticlePriceUpdate>, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Update Outgoing Invoice
     * 
     * @param outgoingInvoiceId 
     * @param outgoingInvoiceUpdate 
     */
    updateOutgoingInvoiceOutgoingInvoiceOutgoingInvoiceIdPut(outgoingInvoiceId: number, outgoingInvoiceUpdate: OutgoingInvoiceUpdate, extraHttpRequestParams?: any): Observable<OutgoingInvoice>;

    /**
     * Update Price
     * 
     * @param priceId 
     * @param priceUpdate 
     */
    updatePricePricePriceIdPut(priceId: number, priceUpdate: PriceUpdate, extraHttpRequestParams?: any): Observable<Price>;

    /**
     * Update Recalculation
     * 
     * @param jobId 
     * @param recalculationUpdate 
     */
    updateRecalculationRecalculationJobIdPut(jobId: number, recalculationUpdate: RecalculationUpdate, extraHttpRequestParams?: any): Observable<Recalculation>;

    /**
     * Update Service
     * 
     * @param serviceId 
     * @param serviceUpdate 
     */
    updateServiceServiceServiceIdPost(serviceId: number, serviceUpdate: ServiceUpdate, extraHttpRequestParams?: any): Observable<Service>;

    /**
     * Update Stock
     * 
     * @param stockId 
     * @param stockUpdate 
     */
    updateStockStockStockIdPut(stockId: number, stockUpdate: StockUpdate, extraHttpRequestParams?: any): Observable<Stock>;

    /**
     * Update Subjob
     * 
     * @param subjobId 
     * @param subJobCreate 
     */
    updateSubjobJobSubJobSubjobIdPut(subjobId: number, subJobCreate: SubJobCreate, extraHttpRequestParams?: any): Observable<Job>;

    /**
     * Update Supplier
     * 
     * @param supplierId 
     * @param supplierCreate 
     */
    updateSupplierSupplierSupplierIdPut(supplierId: number, supplierCreate: SupplierCreate, extraHttpRequestParams?: any): Observable<Supplier>;

    /**
     * Update Technical Data
     * 
     * @param technicalDataId 
     * @param technicalDataUpdate 
     */
    updateTechnicalDataTechnicalDataTechnicalDataIdPut(technicalDataId: number, technicalDataUpdate: TechnicalDataUpdate, extraHttpRequestParams?: any): Observable<TechnicalData>;

    /**
     * Update Template Paint
     * 
     * @param templatePaintId 
     * @param templatePaintUpdate 
     */
    updateTemplatePaintTemplatePaintTemplatePaintIdPut(templatePaintId: number, templatePaintUpdate: TemplatePaintUpdate, extraHttpRequestParams?: any): Observable<TemplatePaint>;

    /**
     * Update Unit
     * 
     * @param unitId 
     * @param unitCreate 
     */
    updateUnitUnitUnitIdPut(unitId: number, unitCreate: UnitCreate, extraHttpRequestParams?: any): Observable<Unit>;

    /**
     * Update User Me
     * 
     * @param userUpdate 
     */
    updateUserMeUsersMePut(userUpdate: UserUpdate, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Update User Password
     * 
     * @param userId 
     * @param userPassword 
     */
    updateUserPasswordUsersPasswordUserIdPut(userId: number, userPassword: UserPassword, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Update User
     * 
     * @param userId 
     * @param userUpdate 
     */
    updateUserUsersUserIdPut(userId: number, userUpdate: UserUpdate, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Update Vat
     * 
     * @param vatId 
     * @param vatCreate 
     */
    updateVatVatVatIdPut(vatId: number, vatCreate: VatCreate, extraHttpRequestParams?: any): Observable<Vat>;

    /**
     * Update Work Day
     * 
     * @param workDayId 
     * @param workDayUpdate 
     */
    updateWorkDayWorkDayWorkDayIdPut(workDayId: number, workDayUpdate: WorkDayUpdate, extraHttpRequestParams?: any): Observable<WorkDay>;

    /**
     * Update Workload
     * 
     * @param workloadId 
     * @param workloadUpdate 
     */
    updateWorkloadWorkloadWorkloadIdPut(workloadId: number, workloadUpdate: WorkloadUpdate, extraHttpRequestParams?: any): Observable<Workload>;

    /**
     * Upload Ingoing Invoice Xml As String
     * 
     * @param xmlFile 
     */
    uploadIngoingInvoiceXmlAsStringIngoingInvoiceUploadXmlAsStringPost(xmlFile: Array<XmlFile>, extraHttpRequestParams?: any): Observable<Array<IngoingInvoice>>;

    /**
     * Upload Ingoing Invoice Xml
     * 
     * @param requestBody 
     */
    uploadIngoingInvoiceXmlIngoingInvoiceUploadXmlPost(requestBody: Array<Blob>, extraHttpRequestParams?: any): Observable<Array<IngoingInvoice>>;

}
